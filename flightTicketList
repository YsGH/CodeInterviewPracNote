每一项包括departure, arrival, cost，然后给一个整数k, 表示最多允许k次中转。
给定起始地点A，到达地点B, 要求输出从A到B的最小花费，最多k次中转。

Given a flight itinerary consisting of starting city, destination city, and ticket price (2d list) - 
find the optimal price flight path to get from start to destination. (A variation of Dynamic Programming Shortest Path)
mincost of flight from start to end if allowed at most k connections. 
比如： A->B, 100, B->C, 100, A->C, 500. 如果k是1的话，起点终点是A，C的话，那A->B->C最好

Bellman-Ford Algorithm

类似pd思想，i 次connections到v点的最小cost ＝ (i－1次connections 到u点 + cost from u to v) minimun of all possible u
1, 地点A，到达地点B。转折0次，则到达除A外的所有点的cost为无穷大。
2, 转折点每增加一次，扫描图上所有边，如果能使该边到达点的cost减小（cost（v， i－1）＋ cost（wv）），则更新到达点cost(w, i) 并记录父节点
   注意更新时要分开w(i-1)和 w(i) （preCost，cost）不要搞混 
3, 增加k次后，找到B点cost

package LeetCode;
import java.util.*;

public class FlightTicketsList {
	public List<String> getMinCostPath(String[] tickets, String start, String end, int k) {
		// corner
		Map<String, Des> graph = new HashMap<>();
		getTicketsGraph(tickets, graph);
		
		Des startDes = graph.get(start);
		startDes.preCost = 0;
		startDes.cost = 0;
		
		for (int i = 0; i <= k; i++) {
			for (Map.Entry<String, Des> entry: graph.entrySet()) {
				Des cur = entry.getValue();
				List<Des> tos = cur.tos;
				List<Integer> costs = cur.costs;
				
				for (int j = 0; j < tos.size(); j++) {
					Des to = tos.get(j);
					if (cur.preCost != Integer.MAX_VALUE && cur.preCost + costs.get(j) < to.preCost) {
						to.cost = cur.preCost + costs.get(j);
						to.parent = cur;
					}
				}
			}
			
			for (Map.Entry<String, Des> entry: graph.entrySet()) {
				Des cur = entry.getValue();
				cur.cost = cur.preCost;
			}
		}
		
		Des endDes = graph.get(end);
		
		List<String> result = new ArrayList<>();
		while (endDes != null) {
			result.add(endDes.name);
			endDes = endDes.parent;
		}
		Collections.reverse(result);
		return result;
	}
	
	public static void main(String[] args) {
		FlightTicketsList ft = new FlightTicketsList();

		String t1 = "A->B,100";
		String t2 = "B->C,100";
		String t3 = "A->C,500";
		
		String[] tickets = new String[] {t1, t2, t3};
		System.out.println(ft.getMinCostPath(tickets, "A", "C", 1).toString());
	}
	
	private void getTicketsGraph(String[] tickets, Map<String, Des> graph) {
		for (String ticket: tickets) {
			String[] info = parseTicket(ticket);
			String from = info[0];
			String to = info[1];
			int cost = Integer.valueOf(info[2]);
			Des fromDes = graph.get(from);
			Des toDes = graph.get(to);
			if (fromDes == null) {
				fromDes = new Des(from);
				graph.put(from, fromDes);
			}
			if (toDes == null) {
				toDes = new Des(to);
				graph.put(to, toDes);
			}
			fromDes.tos.add(toDes);
			fromDes.costs.add(cost); // assume no duplicate tickets;	
		}
	}
	
	private String[] parseTicket(String ticket) {
		int i = 0;
		while (ticket.charAt(i) != '-') {
			i++;
		}
		String from = ticket.substring(0, i);
		i += 2;
		int toStart = i;
		while (ticket.charAt(i) != ',') {
			i++;
		}
		String to = ticket.substring(toStart, i);
		
		String cost = ticket.substring(i+1);
		return new String[]{from, to, cost};
	}
}

class Des{
	String name;
	List<Des> tos;
	List<Integer> costs;
	Des parent;
	int preCost;
	int cost;
	public Des(String name) {
		this.name = name;
		tos = new ArrayList<Des>();
		costs = new ArrayList<Integer>();
		preCost = Integer.MAX_VALUE;
		cost = Integer.MAX_VALUE;
	}
}

