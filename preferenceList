每个人都有一个preference的排序，在不违反每个人的preference的情况下得到总体的preference的排序 
拓扑排序解决(https://instant.1point3acres.com/thread/207601)

package LeetCode;
import java.util.*;

public class PreferenceList {
	public List<String> getPreferenceList(List<List<String>> input) {
		// corner
		List<String> list = new ArrayList<>();
		
		Map<String, PNode> graph = new HashMap<>();
		getPreferenceGraph(input, graph);
		getPreferenceList(graph, list);
		return list;
	}
	
	public static void main(String[] args) {
		PreferenceList pl = new PreferenceList();
		String s1 = "a1";
		String s2 = "a2";
		String s3 = "a3";
		List<String> p1 = new ArrayList<>();
		p1.add(s1);
		p1.add(s2);
		
		List<String> p2 = new ArrayList<>();
		p2.add(s3);
		p2.add(s2);
		
		List<List<String>> input = new ArrayList<>();
		input.add(p1);
		input.add(p2);
		System.out.println(pl.getPreferenceList(input).toString());
	}
	
	private void getPreferenceGraph(List<List<String>> input, Map<String, PNode> graph) {
		// corner
		for (List<String> list: input) {
			for (int i = 0; i < list.size()-1; i++) {
				String a = list.get(i);
				String b = list.get(i+1);
				PNode na = graph.get(a);
				PNode nb = graph.get(b);
				if (na == null) {
					na = new PNode(a);
					graph.put(a, na);
				}
				if (nb == null) {
					nb = new PNode(b);
					graph.put(b, nb);
				}
				
				na.outPNodes.add(nb);
				nb.inPNodes.add(na);
			}
		}
	}
	
	private void getPreferenceList(Map<String, PNode> graph, List<String> list) {
		// corner
		
		PriorityQueue<PNode> pq = new PriorityQueue<>(new Comparator<PNode>(){
			@Override
			public int compare(PNode s1, PNode s2) {
				Set<PNode> set1 = s1.inPNodes;
				Set<PNode> set2 = s2.inPNodes;
				if (set1.size() == set2.size()) {
					return 0;
				}
				
				return set1.size() < set2.size()? -1:1;
			}
		});
		
		for (Map.Entry<String, PNode> entry: graph.entrySet()) {
			pq.offer(entry.getValue());
		}
		
		while(!pq.isEmpty()) {
			PNode cur = pq.poll();
			if (cur.inPNodes.size() != 0) {
				throw new IllegalArgumentException("has cycle!");
			}
			list.add(cur.name);
			Set<PNode> out = cur.outPNodes;
			for (PNode o: out) {
				o.inPNodes.remove(cur);
				pq.remove(o);
				pq.offer(o);
			}
		}
		
	}
}

class PNode {
	String name; 
	Set<PNode> inPNodes;
	Set<PNode> outPNodes;
	
	public PNode(String name) {
		this.name = name;
		inPNodes = new HashSet<PNode>();
		outPNodes = new HashSet<PNode>();
	}
	
	@Override 
	public boolean equals(Object o) {
		PNode PNode = (PNode)o;
		return PNode.name == this.name;
	}
	
	@Override 
	public int hashCode() {
		return name.hashCode();
	}
	
}
