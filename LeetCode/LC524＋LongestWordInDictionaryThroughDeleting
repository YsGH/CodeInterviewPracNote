题目：
Given a string and a string dictionary, find the longest string in the dictionary that can 
be formed by deleting some characters of the given string. 
If there are more than one possible results, return the longest word with the smallest lexicographical order. 
If there is no possible result, return the empty string.

Example 1:
Input:
s = "abpcplea", d = ["ale","apple","monkey","plea"]
Output: 
"apple"
    
Example 2:
Input:
s = "abpcplea", d = ["a","b","c"]
Output: 
"a"

keywords: two pointers, string
判断if the word in the dictionary can be formed by deleting some characters of the given string 可以用two pointers

1）如果将字典单词先按照string长度和字母表顺序排序 time O(nlogn*k) n-字典单词个数 k-最长单词长度，找到符合条件的单词直接返回
2）不排序时间复杂度 O(nk), 但是要比较字典中所有单词

my code：
public class Solution {
    public String findLongestWord(String s, List<String> d) {
        // corner
        String result = "";
        for (String word: d) {
            if (canBeFormed(s, word)) {
                if (result.length() < word.length() 
                || (result.length() == word.length() && isSmaller(word, result))) {
                    result = word;
                }
            }
        }
        return result;
    }
    
    private boolean canBeFormed(String s, String word) {
        int sp = 0;
        int wp = 0;
        while (sp < s.length() && wp < word.length()) {
            if (s.charAt(sp) == word.charAt(wp)) {
                wp++;
            }
            sp++;
        }
        
        return wp == word.length();
    }
    
    private boolean isSmaller(String a, String b) {
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) < b.charAt(i)) {
                return true;
            }
            if (a.charAt(i) > b.charAt(i)) {
                return false;
            }
        }
        return true;
    }
}
Zhen code:
public class Solution {
    public String findLongestWord(String s, List<String> d) {
        int len=0;
        String ret="";
        int n=s.length();
        for (String word: d) {
            int m=word.length();
            if (n<m || m<len) {
                continue;
            }
            if (m==len && ret.compareTo(word)<0) {
                continue;
            }
            int dpos=0;
            for (int i=0; i<n; i++) {
                if (n-i<m-dpos) {
                    break;
                }
                if (s.charAt(i)==word.charAt(dpos)) {
                    dpos++;
                    if (dpos==m) {
                        ret=word;
                        len=m;
                        break;
                    }
                }
            }
        }
        return ret;
    }
}
