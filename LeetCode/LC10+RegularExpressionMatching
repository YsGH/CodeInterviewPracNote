/*
题目：
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

＃dp #regex # regular expression 
*/

public class Solution {
    public boolean isMatch(String s, String p) {
        // corner 
        
        int n = p.length();
        int m = s.length();
        
        boolean[][] canMatch = new boolean[n+1][m+1];
        for (int i = 0; i < n+1; i++) {
            for (int j = 0; j < m+1; j++) {
                if (i == 0 && j == 0) {
                    canMatch[i][j] = true;
                } else if (i == 0 || j == 0) {
                    if (j==0 && p.charAt(i-1) == '*' && canMatch[i-2][j]) {
                        canMatch[i][j] = true;
                    } else {
                        canMatch[i][j] = false;
                    }
                } else if (p.charAt(i-1) == '*') {
                    canMatch[i][j] = canMatch[i-2][j] || 
                        (canMatch[i][j-1] && (p.charAt(i-2) == s.charAt(j-1)|| p.charAt(i-2) == '.'));
			// canMatch[i-2][j] * -> zero of the preceeding element
			// 第二行，＊ 代替 >= 1 preceeding element
                } else if (p.charAt(i-1) == '.') {
                    canMatch[i][j] = canMatch[i-1][j-1];
                } else {
                    canMatch[i][j] = canMatch[i-1][j-1]&&(p.charAt(i-1) == s.charAt(j-1));
                }
            }
	}
        return canMatch[n][m];
    }
}



public boolean isMatch(String s, String p) {
    boolean[][] dp = new boolean[s.length()+1][p.length()+1];
    dp[0][0] = true;
    for (int i = 0; i < p.length(); i++) {
        if (p.charAt(i) == '*' && dp[0][i-1]) {
            dp[0][i+1] = true;
        }
    }
    for (int i = 0 ; i < s.length(); i++) {
        for (int j = 0; j < p.length(); j++) {
            if (p.charAt(j) == '.' || p.charAt(j) == s.charAt(i)) {
                dp[i+1][j+1] = dp[i][j];
            }
            if (p.charAt(j) == '*') {
                dp[i + 1][j + 1] = dp[i+1][j-1];
                if (p.charAt(j - 1) == s.charAt(i) || p.charAt(j-1)=='.') {
					dp[i + 1][j + 1]= dp[i][j+1]||dp[i+1][j+1];
				}
            }
        }
    }
    return dp[s.length()][p.length()];
}
