题目：
There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. 
You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. 
Derive the order of letters in this language.

For example, Given the following words in dictionary,

[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
] 
The correct order is: "wertf".

Note: You may assume all letters are in lowercase. If the order is invalid, return an empty string. 
There may be multiple valid order of letters, return any one of them is fine.


key words: toplogical sort


solution:
public class Solution {
    public String alienOrder(String[] words) {
      // corner
      Map<Charactor, Set<Charactor>> edges = new HashMap<>();
      getAllEdges(words, edges);
      Set<Charactor> visited = new HashSet<>();
      StringBuilder sbld = new StringBuilder();
      for (Map.Entry<Charactor, Set<Charactor>> entry: edges.entrySet()) {
        if (!visited.contain(entry.getKey())) {
          getCharOrder(entry.getKey(), edges, new HashSet<Charactor>(), visited, sbld);
        }
      }
      return new String(sbld.reverse());
   }
   
   private void getAllEdges(String[] words, Map<Charactor, Set<Charactor>> edges) {
      for (int i = 0; i < words.length-1; i++) {
        int m = 0;
        int n = 0;
        String w1 = words[i];
        String w2 = words[i+1];
        while (m < w1.length() && n < w2].length()) {
            if (w1.charAt(m) != w2.charAt(n)) {
                Set<Charactor> set = edges.get(w1.charAt(m));
                if (set == null) {
                    set = new HashSet<Charactor>();
                    edges.put(w1.charAt(m), set);
                }
                set.add(w2.charAt(n));
            }
            m++;
            n++;
        }
      }
   }
   
   private void getCharOrder(Charactor c, Map<Charactor, Set<Charactor>> edges, Set<Charactor> visiting, 
                            Set<Charactor> visited, StringBuilder sbld) {
      Set<Charactor> nei = edges.get(c);
      for (Charactor next: nei) {
          if (visiting.contains(next)) {
              throw new Exception("have cycle!");
          }
          if (!visited.contains(next)) {
              visiting.add(next);
              getCharOrder(next, edges, visiting, visited, sbld);
          }
      }
      visited.add(c);
      sbld.append(c);
   }
}
