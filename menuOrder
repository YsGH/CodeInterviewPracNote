点菜，菜价格为double，问如何正好花完手里的钱
解法：把菜单价格*100转成整数，题目转换成leetcode 40.Combination Sum II（https://leetcode.com/problems/combination-sum-ii/?tab=Description）


class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        // corner
        Arrays.sort(candidates);
        
        List<List<Integer>> combinations = new ArrayList<>();
        if (candidates == null || candidates.length == 0) {
            return combinations;
        }
        getCombination(candidates, 0, target, 0, new ArrayList<Integer>(), combinations);
        return combinations;
    }
    
    private void getCombination(int[] candidates, int step, int target, int sum,
                                List<Integer> curList, List<List<Integer>> combinations) {
        if (step >= candidates.length) {
            if (sum == target) {
                List<Integer> list = new ArrayList<>();
                for (Integer in: curList) {
                    list.add(in);
                }
                combinations.add(list);
            }
            return;
        }
        
        if (sum > target) {
            return;
        }
        
        curList.add(candidates[step]);
        getCombination(candidates, step+1, target, sum+candidates[step], curList, combinations);
        curList.remove(curList.size()-1);
        int n = 1;
        while (step+n < candidates.length && candidates[step+n] == candidates[step]) {
            n++;
        }
        getCombination(candidates, step+n, target, sum, curList, combinations);
    }
}


public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res  = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        helper(candidates, 0, target, list, res);
        return res;
    }
    
    private void helper(int[] candidates,int ind, int target, List<Integer> list, List<List<Integer>> res) {
        int sum = 0;
        for (Integer i : list) {
            sum += i;
        }
        if (sum == target) {
            res.add(new ArrayList<Integer>(list));
            return;
        }
        if (sum > target) {
            return;
        }
        
        for (int i = ind; i < candidates.length; i++) {
            if (i > ind && candidates[i] == candidates[i-1]) {
                continue;
            }
            list.add(candidates[i]);
            helper(candidates,i+1, target, list, res);
            list.remove(list.size()-1);
        }
    }
}
